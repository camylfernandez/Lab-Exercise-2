//
//  ViewController.swift
//  Lab-Exercise-2
//
//  Created by Camyl Fernandez on 3/21/23.
//

import UIKit

class TableViewController: UITableViewController {

    var searchResponse: SearchResponse?
    
    override func viewDidLoad() {
        super.viewDidLoad()
        makeAPICall { searchResponse in
            self.searchResponse = searchResponse
            DispatchQueue.main.async {
                self.tableView.reloadData()
            }
        }
    }
    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = UITableViewCell()
        cell.textLabel?.text = searchResponse?.Search[indexPath.row]._id
        return cell
    }
    
    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return searchResponse?.Search.count ?? 0
    }
    
    func makeAPICall(completion: @escaping (SearchResponse?) -> Void) {
        let domain = "https://api.quotable.io/random"

        guard let url = URL(string: "\(domain)") else {
            completion(nil)
            return
        }
        let task = URLSession.shared.dataTask(with: url) { data, response, error in
            var searchResponse: SearchResponse?
            defer {completion(searchResponse)}
            if let error = error {
                print("Error with API call: \(error)")
                return
            }
            guard let httpResponse = response as? HTTPURLResponse, (200...299).contains(httpResponse.statusCode)
            else {
                print("Error with the response (\(String(describing: response))")
                return
            }
            if let data = data,
               let response = try? JSONDecoder().decode(SearchResponse.self, from: data)
            {
                searchResponse = response
                print(response.Search.first?._id)
            } else {
                print("Something is wrong with decoding, probably.")
            }
        }
        task.resume()
    }
}

struct SearchResponse: Codable {
    let totalResults: String
    let Response: String
    let Search: [Quote]
    enum CodingKeys: String, CodingKey {
        case totalResults
        case Response
        case Search
    }
}

struct Quote: Codable {
    let _id: String
    let content: String
    let author: String
    let tags: String
    let authorSlug: String
    let length: Int
    let dateAdded: String
    let dateModified: String
    
    enum CodingKeys: String, CodingKey {
        case _id
        case content
        case author
        case tags
        case authorSlug
        case length
        case dateAdded
        case dateModified
    }
    init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        self._id = try container.decode(String.self, forKey: ._id)
        self.content = try container.decode(String.self, forKey: .content)
        self.author = try container.decode(String.self, forKey: .author)
        self.tags = try container.decode(String.self, forKey: .tags)
        self.authorSlug = try container.decode(String.self, forKey: .authorSlug)
        self.length = try container.decode(Int.self, forKey: .length)
        self.dateAdded = try container.decode(String.self, forKey: .dateAdded)
        self.dateModified = try container.decode(String.self, forKey: .dateModified)

    }
}
